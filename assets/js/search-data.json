{
  
    
        "post0": {
            "title": "R-squared: Statistical and Machine Learning interpretation",
            "content": "R-squared . R-squared ($R^2$), also known as the coefficient of determination is a measure to evaluate the overall fit of a linear model i.e how close the fitted regression line is to the observed data. . One of the most common metrics for evaluating the performance of regression models, also is a point of confusion and often leads to misinterpreted results. I believe this is due to the difference in explanation of the metric from statistics and machine learning sources. These . In this post we&#39;ll derive R-squared using both approaches and also implement them to check the performance of a model on a toy dataset. The Boston House prices dataset and a Random Forest Regressor are used to illustrate the concepts in the code snippets. . Statistical Definition: . Defines R-squared as the proportion of variance explained, meaning the proportion of variance of the target y that is explained by the model. It is also defined as comparing the predictions of a model to a simple null model, one that always predicts the mean of the target variable. . The R-squared is defined as a proportion with a range of [0, 1] where a model that perfectly explains the variation in the target has a score of 1 and a score of 0 represents a model that explains none of the variation in the target. . However, these definitions don’t talk about how R-squared can be negative if the fit of the model is worse than that of the null model. In fact, using R-squared in the machine learning context where we care about generalising i.e. predicting on unseen or out of sample data the R-squared is often negative and problematic. . For a model $h_ theta$, consider the Random variables $y$ (Target) and $ hat{y}$ (predicted values by model). . The Residual of the error is the difference between the actual value of the target and the predictions of the model. . $$e_i = y_i - hat{y_i}$$ . The variance of a random variable x is the measure of the spread of its distribution in the case of a population or more generally it is the measure of how far on average the observed value of a random variable is from its expected value. . $$Var(x) = E[(x - E(x))^2]$$ . which for a population with n data points: . $$ sigma^2 = frac{1}{n} sum{(x_i - bar{x})^2}$$ . and for a sample, the unbiased estimate of the variance: . $$S^2 = frac{1}{n-1} sum{(x_i - bar{x})^2} $$ . and, R-squared from its definition as a proportion of explained variance is 1 minus the proportion of unexplained variance, . $$ R^2 = 1 - frac{S_{e}^{2}( text{Error from fitted model})}{S_{y}^{2}( text{From data points})} $$ . When and why is R-squared negative. . In the statistical learning concepts we do not not care about generalising to unseen data. In the case of machine learning the model&#39;s fit can be arbitrarily worse than the null model and the R-squared will be negative as a result. For the training set the R-squared in bounded by [0, 1] but not when we present the model unseen data. . R^2 for null model : 0.0 MSE for null model : 9.757620233144245 . Shifting the prediction of mean by a value of -10. . R^2 for null model : -1.0502971264840726 MSE for null model : 13.97179847457964 . Machine Learning Definition: . Focuses on the definition of the error estimate in terms of the sum of squared residual errors (SSE), the mean squared error (MSE) is simply the SSE divided by the total samples of the data. . Ultimately gives us the form : . $$R^2 = 1 - frac{MSE_{ text{Error from fitted model}}}{MSE_{ bar{y}( text{From data points})} }$$ . To conclude, The R2 score, or coefficient of determination is a common regression, which measures how well a model performs relative to a simple mean of the target values. It is often thought of as the amount of variance explained by a model. Where, R2 = 1 indicates a perfect match, R2 = 0 indicates the model does no better than simply taking the mean of the data, and negative values mean even worse models. . Illustrating the out-of-sample R^2 of predictions made by a Random Forest Regressor : . RF Train R^2 : 0.9813427844398096 Out of bag estimate R^2 : 0.850591725350667 RF Validation R^2 : 0.8183672893142674 . Manual implementation of Coefficient of determination R^2 . $$R^2 = 1 - frac{S_{e}^{2}( text{Uses fitted line})}{S_{y}^{2}( text{From data points})}$$ where $S_{e}^{2}$ is the sample variance of the residuals and $S_{y}^{2}$ is the sample variance of the outputs. . resids = preds - y_test # Using sample variance of residuals to calculate R^2. 1 - (np.var(resids, ddof=1))/ (np.var(y_test, ddof=1)) . 0.8209610683012851 . clf_rf.score(x_test, y_test) . 0.8183672893142674 . 1 - mean_squared_error(y_test, preds)/ mean_squared_error(y_test, np.repeat(np.mean(y_test), y_test.shape[0])) . 0.8183672893142674 . Limitations of R^2 . R2 is a proportion but can be misleading as a metric for evaluating performance of a model on a task. Another problem is that it is problematic for time-series data etc. . The threshold for a &quot;good&quot; R-squared value is highly dependent on the particular domain. . R-squared is more useful as a tool for comparing models. | R-squared will always increase as you add more features to the model, even if they are unrelated to the response. | As such, using R-squared as a model evaluation metric can lead to overfitting. | Adjusted R-squared is an alternative that penalizes model complexity (to control for overfitting), but it generally under-penalizes complexity. | As well, R-squared depends on the same assumptions as p-values, and it&#39;s less reliable if those assumptions are violated. (Linear models rely upon a lot of assumptions (such as the features being independent), and if those assumptions are violated (which they usually are), p-values are less reliable.) | . Adjusted R^2 . is an alternative to R^2 that penalizes model complexity (to control for overfitting), but it generally under-penalizes complexity. Defined as : $$ text{Adj } R^2 = 1-(1-R^2)* frac{(n-1)}{(n-p-1)} $$ . Where n = number of sample size , p = number of independent variables . def adj_r2_score(r2, x_test): &quot;&quot;&quot;Better to extend r2&quot;&quot;&quot; adj_r2 = 1 - (1 - r2) * ((x_test.shape[0] - 1)/(x_test.shape[0] - x_test.shape[1] - 1)) return adj_r2 adj_r2_score(clf_rf.score(x_test, y_test), x_test) . 0.8012569614960462 . More reliable Evaluation metrics for regression problems . MSE and MAE and other error metrics are more suitable error metrics used in ML as the results are more directly comparable given the same scale. . MSE is less robust to ouliers in target compared to MAE. . MAE is the easiest to understand, because it&#39;s the average error. | MSE is more popular than MAE, because MSE &quot;punishes&quot; larger errors, which tends to be useful in the real world. | RMSE is even more popular than MSE, because RMSE is interpretable in the &quot;y&quot; units. | . Time-Series Metrics . from https://otexts.com/fpp2/accuracy.html: A forecast method that minimises the MAE will lead to forecasts of the median, while minimising the RMSE will lead to forecasts of the mean. . Mean Absolute Percentage Error (MAPE): this is the same as MAE but is computed as a percentage, which is very convenient when you want to explain the quality of the model to management, [0,+∞) . $MAPE = frac{100}{n} sum limits_{i=1}^{n} frac{|y_i - hat{y}_i|}{y_i}$ .",
            "url": "https://dnanadev.github.io/Personal_Blog/regression/evaluation%20metric/2020/10/26/Regression_Metrics.html",
            "relUrl": "/regression/evaluation%20metric/2020/10/26/Regression_Metrics.html",
            "date": " • Oct 26, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "R-squared . R squared, also known as the coefficient of determination, is a measure to indicate how close the data is to the fitted regression line. Why I keep getting confused is because there seem to be two similar definitions, one from Statistics and one more used in the ML community. (I&#39;m sure they&#39;re derived from the same or similar concept but the way they are presented is confusing. https://en.wikipedia.org/wiki/Coefficient_of_determination . Stats . Focuses on the definitions that explain $R^2$ as explained variance and as related to the correlation coefficient. . $R^2$: The percentage of variation of the target variable(y) that is explained by the linear model. like comparing a regression model to a simple model i.e. the mean of the target data points. . These definitions don&#39;t talk about how $R^2$ can even be negative if the fit is way worse than the mean of the predictions. . Can be derived easily from variance of two random variables and is related to Pearson&#39;s Correlation : . For Random var. x (Actual target) and y (predicted values by model) . The variance of x is the measure of the spread of the probability distribution of the random var. . $Var(x) = E[(x - E(x))^2]$ . which for a population with n data points: . $ sigma^2 = frac{1}{n} sum_{(x_i - bar{x})^2}$ . and covariance is the measure of joint variability of two random variables x and y. . $Cov(x, y) = E[(x - E(x))^2(y - E(y))^2]$ . Correlation is a measure of interdependence or relationship b/w two random variables. . Whereas, Pearson&#39;s Correlation coefficient or Pearson&#39;s r is the most common method of measuring linear correlation in stats. Pearson&#39;s Correlation is a dimensionless scaled form of covariance: . $ text{Pearson&#39;s r} = Cor(x, y) = frac{Cov(x,y)}{ sqrt{Var(x)Var(y)}} = frac{Cov(x,y)}{ sigma_x sigma_y}$ . Which brings us (how ??? ) to $R^2$ or the coefficient of determination as defined in statistics where $S_{e}^{2}$ is the sample variance of the residuals and $S_{y}^{2}$ is the sample variance of the outputs. : $R^2 = 1 - frac{S_{e}^{2}( text{Uses fitted line})}{S_{y}^{2}( text{From data points})}$ . ML . Focuses on the definition derived from the residual errors, which can be used to derive the MSE. Ultimately gives us the form : . $$R^2 : 1 - frac{MSE_{ text{regression line}}}{MSE_{ bar{y}( text{average of datapoints})} }$$ . The score here is the R2 score, or coefficient of determination, which measures how well a model performs relative to a simple mean of the target values. R2 = 1 indicates a perfect match, R2 = 0 indicates the model does no better than simply taking the mean of the data, and negative values mean even worse models. . Limitations of R^2 . R2 is a proportion but can be misleading, for example just changing the scale of the target to log improved the score, but the model is the same. Another problem is that it is problematic for time-series data etc. . R-squared (From Chirags notebook): . A common way to evaluate the overall fit of a linear model | Defined as the proportion of variance explained, meaning the proportion of variance in the observed data that is explained by the model | Also defined as the reduction in error over the null model, which is the model that simply predicts the mean of the observed response | Between 0 and 1, and higher is better | . The threshold for a &quot;good&quot; R-squared value is highly dependent on the particular domain. . R-squared is more useful as a tool for comparing models. | . Feature selection How do I decide which features to include in a linear model? . Using R-squared - We could try models with different sets of features, and compare their R-squared values: | R-squared will always increase as you add more features to the model, even if they are unrelated to the response. | As such, using R-squared as a model evaluation metric can lead to overfitting. | Adjusted R-squared is an alternative that penalizes model complexity (to control for overfitting), but it generally under-penalizes complexity. | As well, R-squared depends on the same assumptions as p-values, and it&#39;s less reliable if those assumptions are violated. (Linear models rely upon a lot of assumptions (such as the features being independent), and if those assumptions are violated (which they usually are), p-values are less reliable.) | . from sklearn.datasets import load_boston import numpy as np import matplotlib.pyplot as plt import seaborn as sns from sklearn.model_selection import train_test_split from sklearn.metrics import mean_squared_error, r2_score . data = load_boston() x = data[&#39;data&#39;] y = data[&#39;target&#39;] x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, shuffle = True) . just repeating the mean of the validation set . # so the model is better, clearly from the RMSE. But R2 is negative. print(mean_squared_error(y_test, np.repeat(np.mean(y_test), y_test.shape[0]), squared=False)) r2_score(y_test, np.repeat(np.mean(y_test), y_test.shape[0])) . 9.612363971387115 . 0.0 . plt.scatter(np.arange(len(x_test)), np.repeat(np.mean(y_test), y_test.shape[0])) plt.scatter(np.arange(len(x_test)), y_test) . &lt;matplotlib.collections.PathCollection at 0x1239c2198&gt; . baseline random forest . from sklearn.ensemble import RandomForestRegressor clf_rf = RandomForestRegressor(n_estimators=100, criterion=&#39;mse&#39;, max_depth=None, min_samples_split=2, min_samples_leaf=1, max_features=&#39;log2&#39;, bootstrap=True, oob_score=True, n_jobs=-1, verbose=1) clf_rf.fit(x_train, y_train) # train R2 baseline clf_rf.score(x_train, y_train) . [Parallel(n_jobs=-1)]: Using backend ThreadingBackend with 4 concurrent workers. [Parallel(n_jobs=-1)]: Done 42 tasks | elapsed: 0.1s [Parallel(n_jobs=-1)]: Done 100 out of 100 | elapsed: 0.1s finished [Parallel(n_jobs=4)]: Using backend ThreadingBackend with 4 concurrent workers. [Parallel(n_jobs=4)]: Done 42 tasks | elapsed: 0.0s [Parallel(n_jobs=4)]: Done 100 out of 100 | elapsed: 0.0s finished . 0.9789622598273697 . clf_rf.oob_score_ . 0.8430730234894389 . preds = clf_rf.predict(x_test) clf_rf.score(x_test, y_test) . [Parallel(n_jobs=4)]: Using backend ThreadingBackend with 4 concurrent workers. [Parallel(n_jobs=4)]: Done 42 tasks | elapsed: 0.0s [Parallel(n_jobs=4)]: Done 100 out of 100 | elapsed: 0.0s finished [Parallel(n_jobs=4)]: Using backend ThreadingBackend with 4 concurrent workers. [Parallel(n_jobs=4)]: Done 42 tasks | elapsed: 0.0s [Parallel(n_jobs=4)]: Done 100 out of 100 | elapsed: 0.0s finished . 0.8661300465727463 . mean_squared_error(y_test, clf_rf.predict(x_test), squared=False) . [Parallel(n_jobs=4)]: Using backend ThreadingBackend with 4 concurrent workers. [Parallel(n_jobs=4)]: Done 42 tasks | elapsed: 0.0s [Parallel(n_jobs=4)]: Done 100 out of 100 | elapsed: 0.0s finished . 3.5169950989894465 . plt.scatter(np.arange(len(x_test)), clf_rf.predict(x_test)) plt.scatter(np.arange(len(x_test)), y_test) . [Parallel(n_jobs=4)]: Using backend ThreadingBackend with 4 concurrent workers. [Parallel(n_jobs=4)]: Done 42 tasks | elapsed: 0.0s [Parallel(n_jobs=4)]: Done 100 out of 100 | elapsed: 0.0s finished . &lt;matplotlib.collections.PathCollection at 0x124508cf8&gt; . sns.distplot(clf_rf.predict(x_test)) sns.distplot(y_test) . [Parallel(n_jobs=4)]: Using backend ThreadingBackend with 4 concurrent workers. [Parallel(n_jobs=4)]: Done 42 tasks | elapsed: 0.0s [Parallel(n_jobs=4)]: Done 100 out of 100 | elapsed: 0.0s finished . &lt;matplotlib.axes._subplots.AxesSubplot at 0x1245c3748&gt; . plt.scatter(preds, y_test) . &lt;matplotlib.collections.PathCollection at 0x124684f98&gt; . np.corrcoef(preds, y_test) . array([[1. , 0.9441041], [0.9441041, 1. ]]) . lets create a manual implementation of pearson&#39;s r and Coefficient of determination R^2 using the statistics approach . Pearson&#39;s Correlation is a dimensionless scaled form of covariance: . $ text{Pearson&#39;s r} = Cor(x, y) = frac{Cov(x,y)}{ sqrt{Var(x)Var(y)}} = frac{Cov(x,y)}{ sigma_x sigma_y}$ . $R^2$ or the coefficient of determination as defined in statistics: where $S_{e}^{2}$ is the sample variance of the residuals and $S_{y}^{2}$ is the sample variance of the outputs. : $R^2 = 1 - frac{S_{e}^{2}( text{Uses fitted line})}{S_{y}^{2}( text{From data points})}$ . y_test.reshape(1, -1).shape . (1, 152) . preds_rf = clf_rf.predict(x_test) preds_rf.shape . [Parallel(n_jobs=4)]: Using backend ThreadingBackend with 4 concurrent workers. [Parallel(n_jobs=4)]: Done 42 tasks | elapsed: 0.0s [Parallel(n_jobs=4)]: Done 100 out of 100 | elapsed: 0.0s finished . (152,) . vars_ = np.vstack((y_test.reshape(1, -1),preds_rf.reshape(1,-1))) vars_.shape . (2, 152) . # covariance matrix - (x,x)(x,y) # (y,x)(y,y) print(np.cov(vars_, bias = False)) cov = np.cov(vars_, bias = False)[0,1] . [[93.00944536 69.49821225] [69.49821225 58.2613368 ]] . print(&#39;std x&#39;, np.std(y_test.reshape(1, -1), ddof=1)) print(&#39;std y&#39;,np.std(preds_rf.reshape(1,-1), ddof=1)) . std x 9.644140467881957 std y 7.632911423355657 . cov/(np.std(y_test.reshape(1, -1), ddof=1) * np.std(preds_rf.reshape(1,-1), ddof=1)) . 0.944104098955523 . from scipy.stats import pearsonr pearsonr(y_test, preds_rf) . (0.9441040989555236, 3.5096505519139538e-74) . pear_r = pearsonr(y_test, preds_rf) pear_r[0]**2 . 0.8913325496646212 . $R^2$ checking both approaches of calculating . # where $S_{e}^{2}$ is the sample variance of the residuals and $S_{y}^{2}$ is the sample variance of the outputs. # $R^2 = 1 - frac{S_{e}^{2}( text{Uses fitted line})}{S_{y}^{2}( text{From data points})}$ # Sklearn uses the sum of squares approach below. resids = preds_rf - y_test 1 - (np.var(resids, ddof=1)/ np.var(y_test, ddof=1)) . 0.8680310627630098 . clf_rf.score(x_test, y_test) . [Parallel(n_jobs=4)]: Using backend ThreadingBackend with 4 concurrent workers. [Parallel(n_jobs=4)]: Done 42 tasks | elapsed: 0.1s [Parallel(n_jobs=4)]: Done 100 out of 100 | elapsed: 0.1s finished . 0.8661300465727463 . # yup this is how its calculated in sklearn. 1 - mean_squared_error(y_test, preds_rf)/ mean_squared_error(y_test, np.repeat(np.mean(y_test), y_test.shape[0])) . 0.8661300465727464 . Adjusted R^2 . is an alternative to R^2 that penalizes model complexity (to control for overfitting), but it generally under-penalizes complexity. Defined as : $$ text{Adj } R^2 = 1-(1-R^2)* frac{(n-1)}{(n-p-1)} $$ . Where n = number of sample size , p = number of independent variables . def adj_r2_score(r2, x_test): &quot;&quot;&quot;Better to extend r2&quot;&quot;&quot; adj_r2 = 1 - (1 - r2) * ((x_test.shape[0] - 1)/(x_test.shape[0] - x_test.shape[1] - 1)) return adj_r2 . adj_r2_score(clf_rf.score(x_test, y_test), x_test) . [Parallel(n_jobs=4)]: Using backend ThreadingBackend with 4 concurrent workers. [Parallel(n_jobs=4)]: Done 42 tasks | elapsed: 0.0s [Parallel(n_jobs=4)]: Done 100 out of 100 | elapsed: 0.0s finished . 0.8535191089310484 . More reliable Evaluation metrics for regression problems . MSE and MAE and other error metrics are more suitable error metrics used in ML as the results are more directly comparable given the same scale. . MSE is less robust to ouliers in target compared to MAE. . MAE is the easiest to understand, because it&#39;s the average error. | MSE is more popular than MAE, because MSE &quot;punishes&quot; larger errors, which tends to be useful in the real world. | RMSE is even more popular than MSE, because RMSE is interpretable in the &quot;y&quot; units. | . Time-Series Metrics . from https://otexts.com/fpp2/accuracy.html: A forecast method that minimises the MAE will lead to forecasts of the median, while minimising the RMSE will lead to forecasts of the mean. . Mean Absolute Percentage Error (MAPE): this is the same as MAE but is computed as a percentage, which is very convenient when you want to explain the quality of the model to management, [0,+∞) . $MAPE = frac{100}{n} sum limits_{i=1}^{n} frac{|y_i - hat{y}_i|}{y_i}$ .",
            "url": "https://dnanadev.github.io/Personal_Blog/2020/10/12/Regression_Metrics.html",
            "relUrl": "/2020/10/12/Regression_Metrics.html",
            "date": " • Oct 12, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://dnanadev.github.io/Personal_Blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://dnanadev.github.io/Personal_Blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://dnanadev.github.io/Personal_Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://dnanadev.github.io/Personal_Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}